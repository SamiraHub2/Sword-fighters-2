-- Carregar a biblioteca
loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/LibraryV2/main/redzLib"))()

-- Serviços
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local localPlayer = Players.LocalPlayer

-- Variáveis
local autoClick = false
local selectedMob = ""
local MobList = {}
local autoEgg22 = false
local autoEgg23 = false
local autoEgg24 = false
local autoMobs = false
local autoQuest = false
local autoDungeon = false
local TpDungeon = false
local autoAfk = false

-- Funções
local function List()
    MobList = {}
    for _, mob in ipairs(game.Workspace.Live.NPCs.Client:GetChildren()) do 
        if mob.Name ~= "" then
            table.insert(MobList, mob.Name)
        end
    end
end

local function Click()
    spawn(function()
        while autoClick do
            wait()
            local success, err = pcall(function()
                ReplicatedStorage.Packages.Knit.Services.ClickService.RF.Click:InvokeServer()
            end)
            if not success then
                warn("Failed to invoke ClickService: " .. tostring(err))
            end
        end
    end)
end

local function EggPurchase(eggName)
    spawn(function()
        while _G[eggName] do
            wait()
            local args = {
                [1] = {
                    ["eggName"] = eggName,
                    ["auto"] = false,
                    ["amount"] = 2
                }
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.BuyEgg:InvokeServer(unpack(args))
        end
    end)
end

local function AllMobs()
    spawn(function()
        while autoMobs do
            wait()
            local mobs = game.Workspace.Live.NPCs.Client:GetChildren()
            if mobs then
                for _, mob in ipairs(mobs) do
                    if mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
                        local character = localPlayer.Character
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame
                            local args = {} 
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ClickService.RF.Click:InvokeServer(unpack(args))
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemDropService.RF.ClaimItem:InvokeServer(unpack(args))
                        else
                            warn("Personagem do jogador local ou HumanoidRootPart não encontrado.")
                        end
                    end
                end
            end
        end
    end)
end

local function Action()
    spawn(function()
        while autoQuest do
            wait()
            for i = 1, 22 do
                local args = {
                    [1] = "Area " .. i
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.QuestService.RF.ActionQuest:InvokeServer(unpack(args))
            end
        end
    end)
end

local function Dungeon()
    spawn(function()
        while autoDungeon do
            wait()
            local mobs = game.Workspace.Live.NPCs.Client:GetChildren()
            if mobs then
                for _, mob in ipairs(mobs) do
                    if mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
                        local character = Players.LocalPlayer.Character
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame
                        else
                            warn("Local player character or HumanoidRootPart not found.")
                        end
                    end
                end
            end
        end
    end)
end

local function Teleport()
    spawn(function()
        while TpDungeon do
            wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-5870.15918, 1119.63513, -6517.26904, 1, 1.00757305e-08, -1.49841402e-13, -1.00757305e-08, 1, -7.75248594e-08, 1.49060289e-13, 7.75248594e-08, 1)
        end
    end)
end

local function AntiAfk()
    spawn(function()
        local VirtualInputManager = game:GetService("VirtualInputManager")
        while autoAfk do
            VirtualInputManager:SendKeyEvent(true, "Space", false, game)
            wait(0.2)
            VirtualInputManager:SendKeyEvent(false, "Space", false, game)
            wait(300)
        end
    end)
end

-- GUI
MakeWindow({
    Hub = {
        Title = "Sword Fighters 2 | Dev | Script",
        Animation = "Sword Fighters 2 | Dev | Script"
    },
    Key = {
        KeySystem = false,
        Title = "Key System",
        Description = "",
        KeyLink = "",
        Keys = {"1234"},
        Notifi = {
            Notifications = true,
            CorrectKey = "Running the Script...",
            Incorrectkey = "The key is incorrect",
            CopyKeyLink = "Copied to Clipboard"
        }
    }
})

MinimizeButton({
    Image = "",
    Size = {75, 40},
    Color = Color3.fromRGB(10, 10, 10),
    Corner = true,
    Stroke = true,
    StrokeColor = Color3.fromRGB(255, 255, 255)
})

local Main = MakeTab({Name = "Main"})
local Quest = MakeTab({Name = "Quest From all the worlds "})
local Egg = MakeTab({Name = "Eggs From All Worlds "})
local TeleportTab = MakeTab({Name = "Teleport World"})
local section01 = AddSection(Main, {"By Dev | Script | Tester"})

local ToggleAutoEgg22 = AddToggle(Egg, {
    Name = "Auto Egg 22",
    Default = false,
    Callback = function(value)
        autoEgg22 = value
        if value then
            _G["Egg 22"] = value
            EggPurchase("Egg 22")
        end
    end
})

local ToggleAutoEgg23 = AddToggle(Egg, {
    Name = "Auto Egg 23",
    Default = false,
    Callback = function(value)
        autoEgg23 = value
        if value then
            _G["Egg 23"] = value
            EggPurchase("Egg 23")
        end
    end
})

local ToggleAutoEgg24 = AddToggle(Egg, {
    Name = "Auto Egg 24",
    Default = false,
    Callback = function(value)
        autoEgg24 = value
        if value then
            _G["Egg 24"] = value
            EggPurchase("Egg 24")
        end
    end
})

local ToggleAutoClick = AddToggle(Main, {
    Name = "Auto Click",
    Default = false,
    Callback = function(value)
        autoClick = value
        if value then
            Click()
            print("Auto Click enabled")
        else
            print("Auto Click disabled")
        end
    end
})

-- Função para redefinir o dropdown
local function ResetDropdown()
    Dropdown:SetValue("Select")
end

-- Botão para redefinir o dropdown
local ResetButton = AddButton(Main, {
    Name = "Reset Dropdown",
    Callback = ResetDropdown
})

-- Inicializar a lista de mobs
List()

local Dropdown = AddDropdown(Main, {
    Name = "Select Mob",
    Options = MobList,
    Default = "Select",
    Callback = function(value)
        selectedMob = value
        while selectedMob == value do
            wait()
            local selectedMobInstance = game.Workspace.Live.NPCs.Client:FindFirstChild(value)
            if selectedMobInstance and selectedMobInstance:FindFirstChild("Humanoid") and selectedMobInstance.Humanoid.Health > 0 then
                if localPlayer.Character then
                    localPlayer.Character:SetPrimaryPartCFrame(selectedMobInstance.HumanoidRootPart.CFrame)
                    local args = {
                        [1] = selectedMobInstance
                    }
                    local success, err = pcall(function()
                        ReplicatedStorage.Packages.Knit.Services.ClickService.RF.Click:InvokeServer(unpack(args))
                    end)
                    if not success then
                        warn("Failed to invoke ClickService: " .. tostring(err))
                    end
                else
                    warn("Local player character not found.")
                end
            else
                print("Selected mob is not valid or is dead.")
            end
        end
    end
})

-- Atualizar a lista de mobs periodicamente
local function RefreshMobList()
    List()
    if Dropdown.SetOptions then
        Dropdown:SetOptions(MobList)
    end
end

spawn(function()
    while true do
        wait(30)
        RefreshMobList()
    end
end)

-- Função para alternar o estado do auto farm
local function ToggleAutoFarm(value)
    autoMobs = value
    if value then
        AllMobs()
    else
        print("Auto Farm All Mobs disabled")
    end
end

local ToggleFarm = AddToggle(Main, {
    Name = "Auto Farm All Mobs",
    Default = false,
    Callback = ToggleAutoFarm
})

local ToggleAutoQuest = AddToggle(Quest, {
    Name = "Auto Quest",
    Default = false,
    Callback = function(value)
        autoQuest = value
        if value then
            Action()
        else
            print("Auto Quest disabled")
        end
    end
})

local ToggleDungeon = AddToggle(Quest, {
    Name = "Auto Dungeon",
    Default = false,
    Callback = function(value)
        autoDungeon = value
        if value then
            Dungeon()
        else
            print("Auto Dungeon disabled")
        end
    end
})

local ToggleTpDungeon = AddToggle(Quest, {
    Name = "TP to Dungeon",
    Default = false,
    Callback = function(value)
        TpDungeon = value
        if value then
            Teleport()
        else
            print("TP to Dungeon disabled")
        end
    end
})

local ToggleAutoAfk = AddToggle(Main, {
    Name = "Anti AFK",
    Default = false,
    Callback = function(value)
        autoAfk = value
        if value then
            AntiAfk()
        else
            print("Anti AFK disabled")
        end
    end
})

-- Teleport Dropdown
local TeleportOptions = {
    "World 1",
    "World 2",
    "World 3",
    "World 4",
    "World 5",
    "World 6",
    "World 7",
    "World 8",
    "World 9",
    "World 10",
    "World 11",
    "World 12",
    "World 13",
    "World 14",
    "World 15",
    "World 16",
    "World 17",
    "World 18",
    "World 19",
    "World 20",
    "World 21",
    "World 22"
}

local TeleportButtons = {
    ["World 1"], CFrame.new(-222.341415, 193.035248, 2.18356514, 1, 9.69555245e-08, -3.98114464e-14, -9.69555245e-08, 1, -3.14824966e-08, 3.67590446e-14, 3.14824966e-08, 1),
    ["World 2], CFrame.new(2235.00635, 170.503235, -614.629761, 1.00000012, 5.68699022e-15, -1.12000009e-09, 5.68699022e-15, 1, -1.70644613e-15, -1.12000009e-09, -1.70644613e-15, 1),
    ["World 3], CFrame.new(3940.23413, 182.966766, -401.454895, 1, -8.80454022e-18, 0, -8.80454022e-18, 1, 0, 0, 0, 1),
    ["World 4], CFrame.new(18436.7832, 205.643585, -7469.4873, 1, 3.57033124e-21, 0, 3.57033124e-21, 1, 0, 0, 0, 1),
    ["World 5], CFrame.new(14081.9062, 195.849487, -7700.2124, 1, 1.07867391e-21, 0, 1.07867391e-21, 1, 0, 0, 0, 1),
    ["World 6], CFrame.new(5962.66895, 164.418991, -536.820007, 1, -1.22592923e-21, 0, -1.22592923e-21, 1, 0, 0, 0, 1),
    ["World 7], CFrame.new(535.25238, 164.696396, -2911.28906, 1, -2.75739971e-21, 0, -2.75739971e-21, 1, 0, 0, 0, 1),
    ["World 8"], CFrame.new(4034.58862, 160.237259, -4377.16846, 1, 1.15733013e-15, -1.50899071e-10, 1.15733013e-15, 1, 2.62694987e-16, -1.50899071e-10, 2.62694987e-16, 1),
    ["World 9"], CFrame.new(5967.56934, 210.048965, -3351.76147, 1, -1.00287097e-21, 1.35525272e-20, -1.00287097e-21, 1, 0, 1.35525272e-20, 0, 1)
}

local DropdownTpWorld = AddDropdown(TeleportTab, {
    Name = "Select World",
    Options = TeleportOptions,
    Default = "World 1",
    Callback = function(value)
        localPlayer.Character.HumanoidRootPart.CFrame = WorldCoordinates[value]
    end
})
